class BatchGatherer:
    def __init__(self, storage, max_concurrent_tasks: int = 5):
        """
        Initialize the BatchGatherer with concurrency settings.

        :param max_concurrent_tasks: Maximum number of concurrent gathering tasks.
        """
        self.storage = storage
        self.semaphore = Semaphore(max_concurrent_tasks)

    async def _process_gatherable(self, gatherable: Gatherable):
        """
        Process a single Gatherable instance.

        :param gatherable: An instance of a class implementing the Gatherable protocol.
        """
        try:
            print(f"Starting processing for Gatherable: {gatherable}")
            payload = await gatherable.gather()
            await self.storage.async_save(payload)
            print(f"Successfully processed Gatherable: {gatherable}")
        except Exception as e:
            print(f"Error during processing of Gatherable {gatherable}: {e}")
            raise

    async def batch_gather(self, strategy: GatherStrategy):
        """
        Execute the gather method for a list of Gatherable instances generated by a strategy.

        :param strategy: An instance of a class implementing the GatherStrategy protocol.
        """
        gatherables = strategy.generate_gatherables()

        tasks = [self._process_gatherable(g) for g in gatherables]
        await gather(*tasks, return_exceptions=True)
